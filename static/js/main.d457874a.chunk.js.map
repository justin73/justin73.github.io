{"version":3,"sources":["components/Header.tsx","components/__styled__/container.ts","pages/default.tsx","styles/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","PageContainer","styled","div","theme","chineseFont","primaryColor","secondaryColor","secondaryFont","DefaultPage","className","lightTheme","font","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAIeA,EAFA,kBAAM,+B,2fCAd,IAAMC,EAAgBC,IAAOC,IAAV,KAChB,qBAAGC,MAAkBC,eACT,qBAAGD,MAAkBE,gBAChC,qBAAGF,MAAkBG,kBAkBb,qBAAGH,MAAkBI,iBCVzBC,EAVK,kBAClB,kBAACR,EAAD,KACE,uBAAGS,UAAU,SAAb,uDACA,wBAAIA,UAAU,YACZ,wBAAIA,UAAU,WAAd,2BACA,wBAAIA,UAAU,WAAd,iCCKOC,EAA2B,CACtCL,aAAc,UACdC,eAAgB,UAChBK,KAAM,SACNP,YAAa,cACbG,cAAe,iBCHFK,MATf,WACE,OACE,kBAAC,IAAD,CAAeT,MAAOO,GACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d457874a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => <div></div>\n\nexport default Header\n","import styled from 'styled-components'\n\nexport const PageContainer = styled.div`\n  font: ${({ theme }) => theme.chineseFont};\n  background-color: ${({ theme }) => theme.primaryColor};\n  color: ${({ theme }) => theme.secondaryColor};\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  p {\n    font-size: 72px;\n    display: block;\n    margin: 0px;\n  }\n  ul.v-slides {\n    font-size: 36px;\n    font-weight: 800;\n    list-style-type: none;\n    transform: translateY(50px);\n    padding: 0;\n    font-family: ${({ theme }) => theme.secondaryFont};\n  }\n`\n","import React from 'react'\nimport { PageContainer } from '../components/__styled__/container'\n\nconst DefaultPage = () => (\n  <PageContainer>\n    <p className=\"title\">我，贾梦 (工程硕士)</p>\n    <ul className=\"v-slides\">\n      <li className=\"v-slide\">(en.) I'am Meng (M.Eng)</li>\n      <li className=\"v-slide\">(fr.) Je suis Meng (M.Eng)</li>\n    </ul>\n  </PageContainer>\n)\n\nexport default DefaultPage\n","// theme.ts\nimport { DefaultTheme } from 'styled-components'\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme {\n    primaryColor: string\n    secondaryColor: string\n    font: string\n    chineseFont: string\n    secondaryFont: string\n  }\n}\n\nexport const lightTheme: DefaultTheme = {\n  primaryColor: '#E4F5FF',\n  secondaryColor: '#022534',\n  font: 'Roboto',\n  chineseFont: 'chineseFont',\n  secondaryFont: 'secondaryFont',\n}\n\nexport const darkTheme: DefaultTheme = {\n  primaryColor: '#022534',\n  secondaryColor: '#E4F5FF',\n  font: 'Roboto',\n  chineseFont: 'chineseFont',\n  secondaryFont: 'secondaryFont',\n}\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport Header from './components/Header'\nimport Default from './pages/default'\nimport { lightTheme } from './styles/theme'\n\nfunction App() {\n  return (\n    <ThemeProvider theme={lightTheme}>\n      <Header />\n      <Default />\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}